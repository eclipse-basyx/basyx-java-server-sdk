/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.eclipse.digitaltwin.basyx.aasregistry.service.api;

import org.eclipse.digitaltwin.basyx.aasregistry.model.Result;
import org.eclipse.digitaltwin.basyx.aasregistry.model.ShellDescriptorSearchRequest;
import org.eclipse.digitaltwin.basyx.aasregistry.model.ShellDescriptorSearchResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-26T10:50:35.975734200+01:00[Europe/Berlin]")
@Validated
@Controller
@Tag(name = "Registry and Discovery Interface", description = "the Registry and Discovery Interface API")
public interface SearchApi {

    default SearchApiDelegate getDelegate() {
        return new SearchApiDelegate() {};
    }

    /**
     * POST /search
     *
     * @param shellDescriptorSearchRequest  (required)
     * @return Search response (status code 200)
     *         or Bad Request (status code 400)
     */
    @Operation(
        operationId = "searchShellDescriptors",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Search response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ShellDescriptorSearchResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ShellDescriptorSearchResponse> searchShellDescriptors(
        @Parameter(name = "ShellDescriptorSearchRequest", description = "", required = true) @Valid @RequestBody ShellDescriptorSearchRequest shellDescriptorSearchRequest
    ) {
        return getDelegate().searchShellDescriptors(shellDescriptorSearchRequest);
     }

}
