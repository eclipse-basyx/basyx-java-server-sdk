/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.eclipse.digitaltwin.basyx.aasregistry.service.api;

import org.eclipse.digitaltwin.basyx.aasregistry.model.AssetAdministrationShellDescriptor;
import org.eclipse.digitaltwin.basyx.aasregistry.model.AssetKind;
import org.eclipse.digitaltwin.basyx.aasregistry.model.GetAssetAdministrationShellDescriptorsResult;
import org.eclipse.digitaltwin.basyx.aasregistry.model.GetSubmodelDescriptorsResult;
import org.eclipse.digitaltwin.basyx.aasregistry.model.Result;
import org.eclipse.digitaltwin.basyx.aasregistry.model.SubmodelDescriptor;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-26T10:50:35.975734200+01:00[Europe/Berlin]")
@Validated
@Controller
@Tag(name = "Registry and Discovery Interface", description = "the Registry and Discovery Interface API")
public interface ShellDescriptorsApi {

    default ShellDescriptorsApiDelegate getDelegate() {
        return new ShellDescriptorsApiDelegate() {};
    }

    /**
     * DELETE /shell-descriptors : Deletes all Asset Administration Shell Descriptors
     *
     * @return No content (status code 204)
     */
    @Operation(
        operationId = "deleteAllShellDescriptors",
        summary = "Deletes all Asset Administration Shell Descriptors",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "204", description = "No content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/shell-descriptors"
    )
    default ResponseEntity<Void> deleteAllShellDescriptors(
        
    ) {
        return getDelegate().deleteAllShellDescriptors();
     }


    /**
     * DELETE /shell-descriptors/{aasIdentifier} : Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return Asset Administration Shell Descriptor deleted successfully (status code 204)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "deleteAssetAdministrationShellDescriptorById",
        summary = "Deletes an Asset Administration Shell Descriptor, i.e. de-registers an AAS",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Asset Administration Shell Descriptor deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/shell-descriptors/{aasIdentifier}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteAssetAdministrationShellDescriptorById(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().deleteAssetAdministrationShellDescriptorById(aasIdentifierFromBase64EncodedParam);
     }


    /**
     * DELETE /shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier} : Deletes a Submodel Descriptor, i.e. de-registers a submodel
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return Submodel Descriptor deleted successfully (status code 204)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "deleteSubmodelDescriptorByIdThroughSuperpath",
        summary = "Deletes a Submodel Descriptor, i.e. de-registers a submodel",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Submodel Descriptor deleted successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteSubmodelDescriptorByIdThroughSuperpath(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier,
        @Parameter(name = "submodelIdentifier", description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("submodelIdentifier") byte[] submodelIdentifier
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        String submodelIdentifierFromBase64EncodedParam = submodelIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(submodelIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().deleteSubmodelDescriptorByIdThroughSuperpath(aasIdentifierFromBase64EncodedParam, submodelIdentifierFromBase64EncodedParam);
     }


    /**
     * GET /shell-descriptors : Returns all Asset Administration Shell Descriptors
     *
     * @param limit The maximum number of elements in the response array (optional)
     * @param cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)
     * @param assetKind The Asset&#39;s kind (Instance or Type) (optional)
     * @param assetType The Asset&#39;s type (UTF8-BASE64-URL-encoded) (optional)
     * @return Requested Asset Administration Shell Descriptors (status code 200)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "getAllAssetAdministrationShellDescriptors",
        summary = "Returns all Asset Administration Shell Descriptors",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested Asset Administration Shell Descriptors", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetAssetAdministrationShellDescriptorsResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shell-descriptors",
        produces = { "application/json" }
    )
    default ResponseEntity<GetAssetAdministrationShellDescriptorsResult> getAllAssetAdministrationShellDescriptors(
        @Min(1) @Parameter(name = "limit", description = "The maximum number of elements in the response array", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "cursor", description = "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cursor", required = false) String cursor,
        @Parameter(name = "assetKind", description = "The Asset's kind (Instance or Type)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assetKind", required = false) AssetKind assetKind,
        @Pattern(regexp = "^[\\x09\\x0A\\x0D\\x20-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]*$") @Size(min = 1, max = 2000) @Parameter(name = "assetType", description = "The Asset's type (UTF8-BASE64-URL-encoded)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "assetType", required = false) String assetType
    ) {
        String assetTypeFromBase64EncodedParam = assetType == null ? null : new String(java.util.Base64.getUrlDecoder().decode(assetType), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().getAllAssetAdministrationShellDescriptors(limit, cursor, assetKind, assetTypeFromBase64EncodedParam);
     }


    /**
     * GET /shell-descriptors/{aasIdentifier}/submodel-descriptors : Returns all Submodel Descriptors
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param limit The maximum number of elements in the response array (optional)
     * @param cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)
     * @return Requested Submodel Descriptors (status code 200)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "getAllSubmodelDescriptorsThroughSuperpath",
        summary = "Returns all Submodel Descriptors",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested Submodel Descriptors", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetSubmodelDescriptorsResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shell-descriptors/{aasIdentifier}/submodel-descriptors",
        produces = { "application/json" }
    )
    default ResponseEntity<GetSubmodelDescriptorsResult> getAllSubmodelDescriptorsThroughSuperpath(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier,
        @Min(1) @Parameter(name = "limit", description = "The maximum number of elements in the response array", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "cursor", description = "A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue", in = ParameterIn.QUERY) @Valid @RequestParam(value = "cursor", required = false) String cursor
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().getAllSubmodelDescriptorsThroughSuperpath(aasIdentifierFromBase64EncodedParam, limit, cursor);
     }


    /**
     * GET /shell-descriptors/{aasIdentifier} : Returns a specific Asset Administration Shell Descriptor
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return Requested Asset Administration Shell Descriptor (status code 200)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "getAssetAdministrationShellDescriptorById",
        summary = "Returns a specific Asset Administration Shell Descriptor",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested Asset Administration Shell Descriptor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssetAdministrationShellDescriptor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shell-descriptors/{aasIdentifier}",
        produces = { "application/json" }
    )
    default ResponseEntity<AssetAdministrationShellDescriptor> getAssetAdministrationShellDescriptorById(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().getAssetAdministrationShellDescriptorById(aasIdentifierFromBase64EncodedParam);
     }


    /**
     * GET /shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier} : Returns a specific Submodel Descriptor
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return Requested Submodel Descriptor (status code 200)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "getSubmodelDescriptorByIdThroughSuperpath",
        summary = "Returns a specific Submodel Descriptor",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Requested Submodel Descriptor", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelDescriptor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
        produces = { "application/json" }
    )
    default ResponseEntity<SubmodelDescriptor> getSubmodelDescriptorByIdThroughSuperpath(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier,
        @Parameter(name = "submodelIdentifier", description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("submodelIdentifier") byte[] submodelIdentifier
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        String submodelIdentifierFromBase64EncodedParam = submodelIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(submodelIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().getSubmodelDescriptorByIdThroughSuperpath(aasIdentifierFromBase64EncodedParam, submodelIdentifierFromBase64EncodedParam);
     }


    /**
     * POST /shell-descriptors : Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS
     *
     * @param assetAdministrationShellDescriptor Asset Administration Shell Descriptor object (required)
     * @return Asset Administration Shell Descriptor created successfully (status code 201)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "postAssetAdministrationShellDescriptor",
        summary = "Creates a new Asset Administration Shell Descriptor, i.e. registers an AAS",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Asset Administration Shell Descriptor created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AssetAdministrationShellDescriptor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/shell-descriptors",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AssetAdministrationShellDescriptor> postAssetAdministrationShellDescriptor(
        @Parameter(name = "AssetAdministrationShellDescriptor", description = "Asset Administration Shell Descriptor object", required = true) @Valid @RequestBody AssetAdministrationShellDescriptor assetAdministrationShellDescriptor
    ) {
        return getDelegate().postAssetAdministrationShellDescriptor(assetAdministrationShellDescriptor);
     }


    /**
     * POST /shell-descriptors/{aasIdentifier}/submodel-descriptors : Creates a new Submodel Descriptor, i.e. registers a submodel
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param submodelDescriptor Submodel Descriptor object (required)
     * @return Submodel Descriptor created successfully (status code 201)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request. (status code 409)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "postSubmodelDescriptorThroughSuperpath",
        summary = "Creates a new Submodel Descriptor, i.e. registers a submodel",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Submodel Descriptor created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SubmodelDescriptor.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict, a resource which shall be created exists already. Might be thrown if a Submodel or SubmodelElement with the same ShortId is contained in a POST request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/shell-descriptors/{aasIdentifier}/submodel-descriptors",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SubmodelDescriptor> postSubmodelDescriptorThroughSuperpath(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier,
        @Parameter(name = "SubmodelDescriptor", description = "Submodel Descriptor object", required = true) @Valid @RequestBody SubmodelDescriptor submodelDescriptor
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().postSubmodelDescriptorThroughSuperpath(aasIdentifierFromBase64EncodedParam, submodelDescriptor);
     }


    /**
     * PUT /shell-descriptors/{aasIdentifier} : Updates an existing Asset Administration Shell Descriptor
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param assetAdministrationShellDescriptor Asset Administration Shell Descriptor object (required)
     * @return Asset Administration Shell Descriptor updated successfully (status code 204)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "putAssetAdministrationShellDescriptorById",
        summary = "Updates an existing Asset Administration Shell Descriptor",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Asset Administration Shell Descriptor updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/shell-descriptors/{aasIdentifier}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putAssetAdministrationShellDescriptorById(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier,
        @Parameter(name = "AssetAdministrationShellDescriptor", description = "Asset Administration Shell Descriptor object", required = true) @Valid @RequestBody AssetAdministrationShellDescriptor assetAdministrationShellDescriptor
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().putAssetAdministrationShellDescriptorById(aasIdentifierFromBase64EncodedParam, assetAdministrationShellDescriptor);
     }


    /**
     * PUT /shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier} : Updates an existing Submodel Descriptor
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param submodelDescriptor Submodel Descriptor object (required)
     * @return Submodel Descriptor updated successfully (status code 204)
     *         or Bad Request, e.g. the request parameters of the format of the request body is wrong. (status code 400)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Default error handling for unmentioned status codes (status code 200)
     */
    @Operation(
        operationId = "putSubmodelDescriptorByIdThroughSuperpath",
        summary = "Updates an existing Submodel Descriptor",
        tags = { "Registry and Discovery Interface" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Submodel Descriptor updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request, e.g. the request parameters of the format of the request body is wrong.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            }),
            @ApiResponse(responseCode = "default", description = "Default error handling for unmentioned status codes", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Result.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/shell-descriptors/{aasIdentifier}/submodel-descriptors/{submodelIdentifier}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> putSubmodelDescriptorByIdThroughSuperpath(
        @Parameter(name = "aasIdentifier", description = "The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("aasIdentifier") byte[] aasIdentifier,
        @Parameter(name = "submodelIdentifier", description = "The Submodel’s unique id (UTF8-BASE64-URL-encoded)", required = true, in = ParameterIn.PATH) @PathVariable("submodelIdentifier") byte[] submodelIdentifier,
        @Parameter(name = "SubmodelDescriptor", description = "Submodel Descriptor object", required = true) @Valid @RequestBody SubmodelDescriptor submodelDescriptor
    ) {
        String aasIdentifierFromBase64EncodedParam = aasIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(aasIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        String submodelIdentifierFromBase64EncodedParam = submodelIdentifier == null ? null : new String(java.util.Base64.getUrlDecoder().decode(submodelIdentifier), java.nio.charset.StandardCharsets.UTF_8);
        return getDelegate().putSubmodelDescriptorByIdThroughSuperpath(aasIdentifierFromBase64EncodedParam, submodelIdentifierFromBase64EncodedParam, submodelDescriptor);
     }

}
