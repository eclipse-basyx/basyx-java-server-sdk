/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.eclipse.digitaltwin.basyx.conceptdescriptionrepository.http;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.eclipse.digitaltwin.aas4j.v3.model.ConceptDescription;
import org.eclipse.digitaltwin.basyx.http.Base64UrlEncodedIdentifier;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-03-21T12:35:49.719724407Z[GMT]")
@Validated
public interface ConceptDescriptionRepositoryHTTPApi {

    @Operation(summary = "Deletes a Concept Description", description = "", tags={ "Concept Description Repository Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Concept Description deleted successfully") })
    @RequestMapping(value = "/concept-descriptions/{cdIdentifier}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteConceptDescriptionById(@Parameter(in = ParameterIn.PATH, description = "The Concept Description’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("cdIdentifier") Base64UrlEncodedIdentifier cdIdentifier);


    @Operation(summary = "Returns all Concept Descriptions", description = "", tags={ "Concept Description Repository Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Concept Descriptions", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ConceptDescription.class)))) })
    @RequestMapping(value = "/concept-descriptions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ConceptDescription>> getAllConceptDescriptions(@Parameter(in = ParameterIn.QUERY, description = "The Concept Description’s IdShort" ,schema=@Schema()) @Valid @RequestParam(value = "idShort", required = false) String idShort, @Parameter(in = ParameterIn.QUERY, description = "IsCaseOf reference (BASE64-URL-encoded)" ,schema=@Schema()) @Valid @RequestParam(value = "isCaseOf", required = false) Base64UrlEncodedIdentifier isCaseOf, @Parameter(in = ParameterIn.QUERY, description = "DataSpecification reference (BASE64-URL-encoded)" ,schema=@Schema()) @Valid @RequestParam(value = "dataSpecificationRef", required = false) Base64UrlEncodedIdentifier dataSpecificationRef);


    @Operation(summary = "Returns a specific Concept Description", description = "", tags={ "Concept Description Repository Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Requested Concept Description", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ConceptDescription.class))) })
    @RequestMapping(value = "/concept-descriptions/{cdIdentifier}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ConceptDescription> getConceptDescriptionById(@Parameter(in = ParameterIn.PATH, description = "The Concept Description’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("cdIdentifier") Base64UrlEncodedIdentifier cdIdentifier);


    @Operation(summary = "Creates a new Concept Description", description = "", tags={ "Concept Description Repository Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Concept Description created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ConceptDescription.class))) })
    @RequestMapping(value = "/concept-descriptions",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ConceptDescription> postConceptDescription(@Parameter(in = ParameterIn.DEFAULT, description = "Concept Description object", required=true, schema=@Schema()) @Valid @RequestBody ConceptDescription body);


    @Operation(summary = "Updates an existing Concept Description", description = "", tags={ "Concept Description Repository Interface" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Concept Description updated successfully") })
    @RequestMapping(value = "/concept-descriptions/{cdIdentifier}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> putConceptDescriptionById(@Parameter(in = ParameterIn.PATH, description = "The Concept Description’s unique id (BASE64-URL-encoded)", required=true, schema=@Schema()) @PathVariable("cdIdentifier") Base64UrlEncodedIdentifier cdIdentifier, @Parameter(in = ParameterIn.DEFAULT, description = "Concept Description object", required=true, schema=@Schema()) @Valid @RequestBody ConceptDescription body);

}

