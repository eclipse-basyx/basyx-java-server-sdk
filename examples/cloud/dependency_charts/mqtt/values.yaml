#################################################################################
# Copyright (c) 2025 SAP SE
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
#################################################################################

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: eclipse-mosquitto
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

websockets:
  # -- By enabling this, an additional listener with protocol websockets is added in the mosquitto config.
  enabled: true

ports:
  mqtt:
    port: 1883
    protocol: TCP
  websockets:
    port: 9001
    protocol: TCP

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: websockets.mqtt.basyx.local
      type: websockets
      paths:
        - path: /
          pathType: ImplementationSpecific
    - host: mqtt.basyx.local
      type: mqtt
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

apirules:
  - enabled: false
    type: websockets
    # -- Specifies the Istio Gateway. The value must reference an actual Gateway in the cluster.
    gateway: kyma-system/kyma-gateway
    # -- Allows configuring CORS headers sent with the response. If corsPolicy is not defined, the CORS headers are enforced to be empty.
    corsPolicy: 
      allowMethods:
      - POST
      - GET
      - PUT
      - DELETE
      - PATCH
      - OPTIONS
      - HEAD
      allowOrigins:
        - regex: ".*" # allow all origins
      allowCredentials: true
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: websockets.mqtt.basyx.local
    # -- Additional ingress annotations to add
    annotations: {}
  - enabled: false
    type: mqtt
    # -- Specifies the Istio Gateway. The value must reference an actual Gateway in the cluster.
    gateway: kyma-system/kyma-gateway
    # -- Allows configuring CORS headers sent with the response. If corsPolicy is not defined, the CORS headers are enforced to be empty.
    corsPolicy: 
      allowMethods:
      - POST
      - GET
      - PUT
      - DELETE
      - PATCH
      - OPTIONS
      - HEAD
      allowOrigins:
        - regex: ".*" # allow all origins
      allowCredentials: true
    # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
    hostname: mqtt.basyx.local
    # -- Additional ingress annotations to add
    annotations: {}

auth:
  enabled: false
  users:
    - username: user
      password: password
      acl:
        - topic: "#"
          access: readwrite

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  tcpSocket:
    port: 1883
  initialDelaySeconds: 5
  periodSeconds: 1
readinessProbe:
  tcpSocket:
    port: 1883
  initialDelaySeconds: 3
  periodSeconds: 3

persistence:
  enabled: true
  accessMode: ReadWriteOnce
  size: 8Gi
  mountPath: "/mosquitto/data"
  subPath: ""

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
