/*
 * BaSyx AAS Repository
 * Asset Administration Shell API
 *
 * OpenAPI spec version: 2.0
 * Contact: basyx-dev@eclipse.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.eclipse.digitaltwin.basyx.http.pagination;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.media.Schema.RequiredMode;

import java.util.ArrayList;
import java.util.List;
/**
 * PagedResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-05-18T14:34:00.315250600+02:00[Europe/Berlin]")
public class PagedResult<T> {
  @SerializedName("items")
  private List<T> items = new ArrayList<T>();

  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("nextCursor")
  private String nextCursor = null;

  public PagedResult<T> items(List<T> items) {
    this.items = items;
    return this;
  }

  public PagedResult<T> addItemsItem(T itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @Schema(requiredMode = RequiredMode.REQUIRED, description = "")
  public List<T> getItems() {
    return items;
  }

  public void setItems(List<T> items) {
    this.items = items;
  }

  public PagedResult<T> limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Maximum number of items per page
   * @return limit
  **/
  @Schema(requiredMode = RequiredMode.AUTO, description = "Maximum number of items per page")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public PagedResult<T> nextCursor(String nextCursor) {
    this.nextCursor = nextCursor;
    return this;
  }

   /**
   * Cursor value representing the starting point of the next page
   * @return nextCursor
  **/
  @Schema(description = "Cursor value representing the starting point of the next page")
  public String getNextCursor() {
    return nextCursor;
  }

  public void setNextCursor(String nextCursor) {
    this.nextCursor = nextCursor;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    @SuppressWarnings("unchecked")
	PagedResult<T> pagedResult = (PagedResult<T>) o;
    return Objects.equals(this.items, pagedResult.items) &&
        Objects.equals(this.limit, pagedResult.limit) &&
        Objects.equals(this.nextCursor, pagedResult.nextCursor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, limit, nextCursor);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PagedResult {\n");
    
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    nextCursor: ").append(toIndentedString(nextCursor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
