/*
 * DotAAS Part 2 | HTTP/REST | Discovery Service Specification
 * The entire Full Profile of the Discovery Service Specification as part of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub).   Publisher: Industrial Digital Twin Association (IDTA) April 2023
 *
 * The version of the OpenAPI document: V3.0.3_SSP-001
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.eclipse.digitaltwin.basyx.aasdiscoveryservice.client.internal;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.eclipse.digitaltwin.aas4j.v3.dataformat.json.JsonMapperFactory;
import org.eclipse.digitaltwin.aas4j.v3.dataformat.json.SimpleAbstractTypeResolverFactory;
import org.eclipse.digitaltwin.aas4j.v3.model.AssetAdministrationShell;
import org.eclipse.digitaltwin.aas4j.v3.model.SpecificAssetId;
import org.eclipse.digitaltwin.basyx.client.internal.ApiClient;
import org.eclipse.digitaltwin.basyx.client.internal.ApiException;
import org.eclipse.digitaltwin.basyx.client.internal.ApiResponse;
import org.eclipse.digitaltwin.basyx.client.internal.Pair;
import org.eclipse.digitaltwin.basyx.client.internal.authorization.TokenManager;
import org.eclipse.digitaltwin.basyx.core.pagination.CursorResult;
import org.eclipse.digitaltwin.basyx.http.pagination.Base64UrlEncodedCursorResult;
import org.openapitools.jackson.nullable.JsonNullableModule;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.URLEncoder;
import java.net.http.HttpClient;
import java.net.http.HttpConnectTimeoutException;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.Consumer;
import java.util.stream.Collectors;

import static java.nio.charset.StandardCharsets.UTF_8;
import org.eclipse.digitaltwin.aas4j.v3.dataformat.core.internal.deserialization.EnumDeserializer;
import org.eclipse.digitaltwin.aas4j.v3.dataformat.core.internal.serialization.EnumSerializer;
import org.eclipse.digitaltwin.aas4j.v3.dataformat.core.internal.util.ReflectionHelper;
import org.eclipse.digitaltwin.aas4j.v3.dataformat.json.internal.ReflectionAnnotationIntrospector;

/**
 * Configuration and utility class for API clients.
 *
 * <p>This class can be constructed and modified, then used to instantiate the
 * various API classes. The API classes use the settings in this class to
 * configure themselves, but otherwise do not store a link to this class.</p>
 *
 * <p>This class is mutable and not synchronized, so it is not thread-safe.
 * The API classes generated from this are immutable and thread-safe.</p>
 *
 * <p>The setter methods of this class return the current object to facilitate
 * a fluent style of configuration.</p>
 */
public class AasDiscoveryServiceApi {

    private HttpClient memberVarHttpClient;
    private ObjectMapper memberVarObjectMapper;
    private String scheme;
    private String host;
    private int port;
    private String memberVarBaseUri;
    private Consumer<HttpRequest.Builder> memberVarInterceptor;
    private Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;
    private Duration memberVarReadTimeout;
    private Duration connectTimeout;
    private TokenManager tokenManager;

    public static String valueToString(Object value) {
        if (value == null) {
            return "";
        }
        if (value instanceof OffsetDateTime) {
            return ((OffsetDateTime) value).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }
        return value.toString();
    }


    public AasDiscoveryServiceApi() {
        this(new ApiClient());
    }

    public AasDiscoveryServiceApi(TokenManager tokenManager) {
        this(new ApiClient());
        this.tokenManager = tokenManager;
    }

    public AasDiscoveryServiceApi(ObjectMapper mapper, String baseUri) {
        this(new ApiClient(HttpClient.newBuilder(), mapper, baseUri));
    }

    public AasDiscoveryServiceApi(ObjectMapper mapper, String baseUri, TokenManager tokenManager) {
        this(new ApiClient(HttpClient.newBuilder(), mapper, baseUri));
        this.tokenManager = tokenManager;
    }

    public AasDiscoveryServiceApi(String baseUri) {
        this(new ApiClient(HttpClient.newBuilder(), new JsonMapperFactory().create(new SimpleAbstractTypeResolverFactory().create()), baseUri));
    }

    public AasDiscoveryServiceApi(String baseUri, TokenManager tokenManager) {
        this(new ApiClient(HttpClient.newBuilder(), new JsonMapperFactory().create(new SimpleAbstractTypeResolverFactory().create()), baseUri));
        this.tokenManager = tokenManager;
    }


    public AasDiscoveryServiceApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
    }

    public static ObjectMapper createDefaultObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.configure(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, false);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
        mapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);
        mapper.registerModule(new JavaTimeModule());
        mapper.registerModule(new JsonNullableModule());
        return mapper;
    }

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @throws ApiException if fails to make API call
     */
    public void deleteAllAssetLinksById(String aasIdentifier) throws ApiException {
        deleteAllAssetLinksByIdWithHttpInfo(aasIdentifier);
    }

    /**
     * Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> deleteAllAssetLinksByIdWithHttpInfo(String aasIdentifier) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = deleteAllAssetLinksByIdRequestBuilder(aasIdentifier);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
                    localVarRequestBuilder.build(),
                    HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode()/ 100 != 2) {
                    throw getApiException("deleteAllAssetLinksById", localVarResponse);
                }
                return new ApiResponse<>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        null
                );
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        }
        catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder deleteAllAssetLinksByIdRequestBuilder(String aasIdentifier) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException(400, "Missing the required parameter 'aasIdentifier' when calling deleteAllAssetLinksById");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/lookup/shells/{aasIdentifier}"
                .replace("{aasIdentifier}", ApiClient.urlEncode(aasIdentifier.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
     *
     * @param assetIds A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId). (optional)
     * @param limit The maximum number of elements in the response array (optional)
     * @param cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)
     * @return GetAllAssetAdministrationShellIdsByAssetLink200Response
     * @throws ApiException if fails to make API call
     */
    public CursorResult<List<String>> getAllAssetAdministrationShellIdsByAssetLink(List<String> assetIds, Integer limit, String cursor) throws ApiException {
        ApiResponse<Base64UrlEncodedCursorResult<List<String>>> localVarResponse = getAllAssetAdministrationShellIdsByAssetLinkWithHttpInfo(assetIds, limit, cursor);
        return localVarResponse.getData();
    }

    /**
     * Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
     *
     * @param assetIds A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.3#/components/schemas/SpecificAssetId). (optional)
     * @param limit The maximum number of elements in the response array (optional)
     * @param cursor A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue (optional)
     * @return ApiResponse&lt;GetAllAssetAdministrationShellIdsByAssetLink200Response&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Base64UrlEncodedCursorResult<List<String>>> getAllAssetAdministrationShellIdsByAssetLinkWithHttpInfo(List<String> assetIds, Integer limit, String cursor) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = getAllAssetAdministrationShellIdsByAssetLinkRequestBuilder(assetIds, limit, cursor);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
                    localVarRequestBuilder.build(),
                    HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode()/ 100 != 2) {
                    throw getApiException("getAllAssetAdministrationShellIdsByAssetLink", localVarResponse);
                }

                return new ApiResponse<>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                        localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Base64UrlEncodedCursorResult<List<String>>>() {
                        }) // closes the InputStream
                );



            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        }
        catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder getAllAssetAdministrationShellIdsByAssetLinkRequestBuilder(List<String> assetIds, Integer limit, String cursor) throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/lookup/shells";

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "assetIds";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "assetIds", assetIds));
        localVarQueryParameterBaseName = "limit";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
        localVarQueryParameterBaseName = "cursor";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return List&lt;SpecificAssetId&gt;
     * @throws ApiException if fails to make API call
     */
    public List<SpecificAssetId> getAllAssetLinksById(String aasIdentifier) throws ApiException {
        ApiResponse<List<SpecificAssetId>> localVarResponse = getAllAssetLinksByIdWithHttpInfo(aasIdentifier);
        return localVarResponse.getData();
    }

    /**
     * Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @return ApiResponse&lt;List&lt;SpecificAssetId&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<SpecificAssetId>> getAllAssetLinksByIdWithHttpInfo(String aasIdentifier) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = getAllAssetLinksByIdRequestBuilder(aasIdentifier);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
                    localVarRequestBuilder.build(),
                    HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode()/ 100 != 2) {
                    throw getApiException("getAllAssetLinksById", localVarResponse);
                }
                if (localVarResponse.body() == null) {
                    return new ApiResponse<List<SpecificAssetId>>(
                            localVarResponse.statusCode(),
                            localVarResponse.headers().map(),
                            null
                    );
                }

                String responseBody = new String(localVarResponse.body().readAllBytes());
                localVarResponse.body().close();

                return new ApiResponse<List<SpecificAssetId>>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<SpecificAssetId>>() {})
                );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        }
        catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder getAllAssetLinksByIdRequestBuilder(String aasIdentifier) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException(400, "Missing the required parameter 'aasIdentifier' when calling getAllAssetLinksById");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/lookup/shells/{aasIdentifier}"
                .replace("{aasIdentifier}", ApiClient.urlEncode(aasIdentifier.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param specificAssetId A list of specific Asset identifiers (required)
     * @return List&lt;SpecificAssetId&gt;
     * @throws ApiException if fails to make API call
     */
    public List<SpecificAssetId> postAllAssetLinksById(String aasIdentifier, List<SpecificAssetId> specificAssetId) throws ApiException {
        ApiResponse<List<SpecificAssetId>> localVarResponse = postAllAssetLinksByIdWithHttpInfo(aasIdentifier, specificAssetId);
        return localVarResponse.getData();
    }

    /**
     * Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     *
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded) (required)
     * @param specificAssetId A list of specific Asset identifiers (required)
     * @return ApiResponse&lt;List&lt;SpecificAssetId&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<SpecificAssetId>> postAllAssetLinksByIdWithHttpInfo(String aasIdentifier, List<SpecificAssetId> specificAssetId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = postAllAssetLinksByIdRequestBuilder(aasIdentifier, specificAssetId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
                    localVarRequestBuilder.build(),
                    HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode()/ 100 != 2) {
                    throw getApiException("postAllAssetLinksById", localVarResponse);
                }
                if (localVarResponse.body() == null) {
                    return new ApiResponse<List<SpecificAssetId>>(
                            localVarResponse.statusCode(),
                            localVarResponse.headers().map(),
                            null
                    );
                }

                String responseBody = new String(localVarResponse.body().readAllBytes());
                localVarResponse.body().close();

                return new ApiResponse<List<SpecificAssetId>>(
                        localVarResponse.statusCode(),
                        localVarResponse.headers().map(),
                        responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<List<SpecificAssetId>>() {})
                );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        }
        catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder postAllAssetLinksByIdRequestBuilder(String aasIdentifier, List<SpecificAssetId> specificAssetId) throws ApiException {
        // verify the required parameter 'aasIdentifier' is set
        if (aasIdentifier == null) {
            throw new ApiException(400, "Missing the required parameter 'aasIdentifier' when calling postAllAssetLinksById");
        }
        // verify the required parameter 'specificAssetId' is set
        if (specificAssetId == null) {
            throw new ApiException(400, "Missing the required parameter 'specificAssetId' when calling postAllAssetLinksById");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/lookup/shells/{aasIdentifier}"
                .replace("{aasIdentifier}", ApiClient.urlEncode(aasIdentifier.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(specificAssetId);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}