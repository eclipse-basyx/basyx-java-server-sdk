name: Build and Push Docker Images on PR Merge

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/CODE_OF_CONDUCT.md'
      - '.github/CODING_CONVENTIONS.md'
      - '.github/CONTRIBUTING.md'
      - '.github/dependabot.yml'
      - '.github/pull_request_template.md'
      - '.github/SECURITY.md'
      - 'docs/**'
      - 'examples/**'
      - 'README.md'
      - '.gitattributes'
      - '.gitignore'
      - 'LICENSE'
      - 'NOTICE'

env:
  DOCKER_NAMESPACE: eclipsebasyx

jobs:
  build-and-push-prerelease:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - name: aas-environment
          path: basyx.aasenvironment/basyx.aasenvironment.component
        - name: aas-repository
          path: basyx.aasrepository/basyx.aasrepository.component
        - name: submodel-repository
          path: basyx.submodelrepository/basyx.submodelrepository.component
        - name: submodel-service
          path: basyx.submodelservice/basyx.submodelservice.component
        - name: conceptdescription-repository
          path: basyx.conceptdescriptionrepository/basyx.conceptdescriptionrepository.component
        - name: aas-discovery
          path: basyx.aasdiscoveryservice/basyx.aasdiscoveryservice.component
        - name: aasxfileserver
          path: basyx.aasxfileserver/basyx.aasxfileserver.component
        - name: aas-registry-kafka-mem
          path: basyx.aasregistry/basyx.aasregistry-service-release-kafka-mem/src/main/docker
        - name: aas-registry-kafka-mongodb
          path: basyx.aasregistry/basyx.aasregistry-service-release-kafka-mongodb/src/main/docker
        - name: aas-registry-log-mem
          path: basyx.aasregistry/basyx.aasregistry-service-release-log-mem/src/main/docker
        - name: aas-registry-log-mongodb
          path: basyx.aasregistry/basyx.aasregistry-service-release-log-mongodb/src/main/docker
        - name: submodel-registry-kafka-mem
          path: basyx.submodelregistry/basyx.submodelregistry-service-release-kafka-mem/src/main/docker
        - name: submodel-registry-kafka-mongodb
          path: basyx.submodelregistry/basyx.submodelregistry-service-release-kafka-mongodb/src/main/docker
        - name: submodel-registry-log-mem
          path: basyx.submodelregistry/basyx.submodelregistry-service-release-log-mem/src/main/docker
        - name: submodel-registry-log-mongodb
          path: basyx.submodelregistry/basyx.submodelregistry-service-release-log-mongodb/src/main/docker

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm/v7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build all modules first
        run: mvn clean install -DskipTests

      # Build the project
      # For registry modules, we activate the dockerbuild profile and specify the module with --pl
      - name: Build BaSyx
        run: |
          if [[ "${{ matrix.name }}" == *"registry"* ]]; then
            # Derive the module's artifactId from the path
            module_root=$(dirname "$(dirname "$(dirname "${{ matrix.path }}")")")
            artifact_id=$(basename "$module_root")
            # Run with dockerbuild profile and namespace
            mvn clean install -DskipTests -Pdockerbuild "-Ddocker.namespace=${{ env.DOCKER_NAMESPACE }}" --pl "org.eclipse.digitaltwin.basyx:${artifact_id}"
          else
            echo "Non-registry module - already built in the previous step."
          fi

      - name: Prepare Registry JAR for Docker
        if: contains(matrix.name, 'registry')
        run: |
          # Go three levels up from src/main/docker to get the module root
          module_root=$(dirname "$(dirname "$(dirname "${{ matrix.path }}")")")

          # Adjust the path to where the dockerbuild profile places the JAR
          JAR_FILE=$(ls "$module_root/target/docker/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}/2.0.0-SNAPSHOT/build/maven/"*.jar | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No repackaged JAR found in $module_root/target/docker/${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}/2.0.0-SNAPSHOT/build/maven. Check your build."
            exit 1
          fi

          # Create the maven directory inside the Docker context and copy the JAR there
          mkdir -p "${{ matrix.path }}/maven"
          cp "$JAR_FILE" "${{ matrix.path }}/maven/"

          # Extract the final name without .jar extension
          FINAL_NAME=$(basename "$JAR_FILE" .jar)
          echo "FINAL_NAME=${FINAL_NAME}" >> $GITHUB_ENV

      - name: No-Op for Non-Registry Modules
        if: "!contains(matrix.name, 'registry')"
        run: echo echo "FINAL_NAME=" >> $GITHUB_ENV

      - name: Set short SHA
        run: echo "SHORT_SHA=${GITHUB_SHA:0:7}" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          tags: |
            ${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:2.0.0-SNAPSHOT
            ${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:2.0.0-SNAPSHOT-${{ env.SHORT_SHA }}
          build-args: FINAL_NAME=${{ env.FINAL_NAME }}

      - name: Verify Docker Image
        run: |
          docker pull ${{ env.DOCKER_NAMESPACE }}/${{ matrix.name }}:2.0.0-SNAPSHOT-${{ env.SHORT_SHA }}
